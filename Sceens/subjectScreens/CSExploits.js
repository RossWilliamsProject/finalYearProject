//imports
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, Dimensions, StyleSheet, Image, ScrollView } from 'react-native';
import * as Animatable from 'react-native-animatable';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import { useNavigation } from '@react-navigation/native';

// learning materials and narrative objects for "exploits"
// Consists of three parts, a prelearning object, the learning material, and a post learning story
// uses state with conditional rendering to ensure that correct part is displayed on screen 
// depending on users current progress with the chapter. 
export default function CSExploits() {
  const navigation = useNavigation();

  //states used to track users position in chapter
  const [showPreStory, setShowPreStory] = useState(true);
  const [showPostStory, setShowPostStory] = useState(false);

  return (
    <View style={styles.container}>
      {showPreStory ? (
        <>
          <View style={styles.header}>
            <Image source={require('C:/Users/epicr/OneDrive/Documents/GitHub/finalYearProject/assets/waves.png')} />
          </View>

          <Animatable.View style={styles.footer} animation="fadeInUpBig">
            <Text style={styles.text}>
              Chapter 8: Part 1
            </Text>
            <View style={styles.characterImage}>
              <Image source={require('C:/Users/epicr/OneDrive/Documents/GitHub/finalYearProject/assets/hacker.png')} />
            </View>

            <View style={styles.learningOpacity} disabled={true}>
              <Text style={styles.text}>
                Ah! Foiled again. Not even one of my viruses worked! This submarine has the tightest system security I’ve ever seen…
                I have only one more trick up my sleeve. I’m going to have to take advantage of existing flaws
                in the system itself to get access…
              </Text>
              <MaterialIcons name="navigate-next" color="black" size={20} />
            </View>
            <TouchableOpacity style={styles.advanceOpacity} onPress={() => setShowPreStory(false)}>
              <Text style={styles.boldtext}>
                Start Learning!
              </Text>
              <MaterialIcons name="navigate-next" color="black" size={20} />
            </TouchableOpacity>
          </Animatable.View>
        </>
      ) : (
        <View style={styles.container}>
          {!showPostStory ? (
            <View style={styles.backgroundview}>
              <ScrollView
                contentContainerStyle={styles.contentContainer}>
                <View style={styles.Learningview}>
                  <Text style={styles.textHeader}>
                    Exploits
                  </Text>
                  <Text style={styles.boldtext}>
                    Memory Exploits
                  </Text>
                  <Text style={styles.text}>
                    In C and C++, the programmer performs memory management.{"\n"}
                    This is flexible, powerful, fast, but dangerous.{"\n"}
                    It leaves the system open to the following exploits:{"\n"}
                    •	Buffer Overruns{"\n"}
                    •	Stack Overruns{"\n"}
                    •	Heap Overruns{"\n"}{"\n"}

                  </Text>

                  <Text style={styles.boldtext}>
                    Buffer Overflows
                  </Text>
                  <Text style={styles.text}>
                    When a program is executed, contiguous blocks of memory can be
                    allocated to store arrays (buffers).{"\n"}
                    If data is written into a buffer that exceeds its size,
                    an overflow occurs.{"\n"}
                    The data will overwrite the memory beyond the buffer.{"\n"}
                    The stack holds information on local variables and functions calls (stack frames){"\n"}
                    -	A function call will push a new frame onto the stack{"\n"}
                    -	A return will pop it off, and go to ret{"\n"}{"\n"}
                  </Text>

                  <Text style={styles.boldtext}>
                    Stack Smashing
                  </Text>
                  <Text style={styles.text}>
                    Stack Smashing involves overwriting the buffer, and the return address.{"\n"}
                    If done properly, the return address can be overwritten with an address
                    of the malicious programmer’s desire – meaning it can be used to inject malicious code.{"\n"}
                    The following methods can be used to prevent stack smashing:{"\n"}
                    -	Data Execution Prevention (NX){"\n"}
                    {"  "}-	Marking the stack as non-executable.{"\n"}
                    {"  "}- This can be circumvented using a return-to-libc attack{"\n"}
                    -	To defeat ret2libc various 0x0 null bytes are
                    inserted into standard library addresses{"\n"}
                    -	Developers also restrict access to obvious system calls{"\n"}
                    -	Address Space Layout Randomisation (ASLR)
                    moves the address of library and programs around{"\n"}{"\n"}

                  </Text>

                  <Text style={styles.boldtext}>
                    Return-Oriented Programming
                  </Text>
                  <Text style={styles.text}>
                    Forget about injecting code, how about just using existing code
                    in the actual exploitable program?{"\n"}
                    No individual section of this program will do what we want.{"\n"}
                    However, by using a carefully constructed chain of short sections
                    of existing code (named “gadgets”) linked together with returns,
                    technically any program can be created. {"\n"}
                    This is dangerous, and very hard to prevent.{"\n"}
                    Luckily, it is extremely difficult to program.{"\n"}{"\n"}

                  </Text>

                  <Text style={styles.boldtext}>
                    Race Conditions
                  </Text>
                  <Text style={styles.text}>
                    With concurrent threads or processes, timing can lead to security vulnerabilities.{"\n"}
                  </Text>

                  <Text style={styles.boldtext}>
                    Exploit Usage Example
                  </Text>
                  <Text style={styles.text}>
                    Heartbleed is a bug in OpenSSL – an exploit exists to specifically target
                    the heartbeat extension – buffer over-read.{"\n"}
                    In heartbeat, a message sent by the client to the server
                    is sent back to prove a connection.{"\n"}
                    In short, by sending a small message, but telling the server
                    it is large (and therefore overflowing the buffer),
                    the servers memory will be copied and send back to the client.{"\n"}{"\n"}
                  </Text>

                </View>
                <TouchableOpacity
                  style={styles.scoreOpacity}
                  onPress={() => setShowPostStory(true)}>
                  <Text style={styles.boldtext}>
                    Finish Learning!
                  </Text>
                </TouchableOpacity>
              </ScrollView>
            </View>
          ) : (
            <>
              <View style={styles.header}>
                <Image source={require('C:/Users/epicr/OneDrive/Documents/GitHub/finalYearProject/assets/waves.png')} />
              </View>

              <Animatable.View style={styles.footer} animation="fadeInUpBig">
                <Text style={styles.text}>
                  Chapter 8: Part 2
                </Text>
                <View style={styles.characterImage}>
                  <Image source={require('C:/Users/epicr/OneDrive/Documents/GitHub/finalYearProject/assets/scientistHappy2.png')} />
                </View>

                <View style={styles.learningOpacity} disabled={true}>
                  <Text style={styles.text}>
                    Whew! The system held! I’m glad that we closed up all those exploits before that hacker
                    could get access to our system! We did such a good job!
                    What an adventure. I can’t wait for our next one!
                  </Text>
                  <MaterialIcons name="navigate-next" color="black" size={20} />
                </View>
                <TouchableOpacity style={styles.scoreOpacity} onPress={() => navigation.navigate('SubjectSelectionCS')}>
                  <Text style={styles.boldtext}>
                    Return to Course
                  </Text>
                  <MaterialIcons name="navigate-next" color="black" size={20} />
                </TouchableOpacity>
              </Animatable.View>

            </>
          )}
        </View>
      )
      }
    </View >
  )
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#D9E3E5"
  },
  header: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  characterImage: {

  },
  textHeader: {
    color: 'black',
    paddingLeft: 10,
    paddingTop: 10,
    fontWeight: 'bold',
    fontSize: 30
  },
  footer: {
    flex: 0,
    backgroundColor: 'white',
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    paddingVertical: 0,
    paddingHorizontal: 100
  },
  title: {
    color: 'white',
    fontSize: 30,
    fontWeight: 'bold'
  },
  view: {
    alignItems: 'flex-end',
    marginTop: 30
  },
  Learningview: {
    flex: 0,
    //alignItems:'center',
    width: "93%",
    borderRadius: 20,
    backgroundColor: "white"
  },
  text: {
    paddingLeft: 15,
    fontSize: 20
  },
  boldtext: {
    fontWeight: 'bold',
    paddingLeft: 10,
    fontSize: 20
  },
  checkbox: {
    alignSelf: "center",
  },
  space: {
    width: 20,
    height: 10,
  },
  contentContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#D9E3E5',
    paddingBottom: 10,
    paddingTop: 20,
    width: '100%',
  },
  scoreOpacity: {
    backgroundColor: 'white',
    width: 375,
    height: 60,
    justifyContent: 'space-between',
    alignItems: 'center',
    borderRadius: 20,
    flexDirection: 'row',
    marginVertical: 5,
    alignSelf: 'center',
    alignItems: 'center',
    justifyContent: 'center',
  },
  advanceOpacity: {
    backgroundColor: '#D9E3E5',
    width: 375,
    height: 60,
    justifyContent: 'space-between',
    alignItems: 'center',
    borderRadius: 20,
    flexDirection: 'row',
    marginVertical: 5,
    alignSelf: 'center',
    alignItems: 'center',
    justifyContent: 'center',
  },
  learningOpacity: {
    backgroundColor: 'white',
    width: 355,
    height: 200,
    alignItems: 'center',
    flexDirection: 'row',
    alignSelf: 'center',
    alignItems: 'center',
    justifyContent: 'center',
  },
});