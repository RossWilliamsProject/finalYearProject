export const QuestionsList = [
  {
    question: "How does Address Space Layout Randomisation help prevent buffer overflow exploits? ",
    answersList: [
      { answer: "Randomising memory positions prevents hard coding addresses ", isCorrect: true },
      { answer: "relocates the stack canary to be more difficult to avoid ", isCorrect: false },
      { answer: "Position of the return address is difficult to know ", isCorrect: false },
      { answer: "Position of common libraries like libc move around ", isCorrect: false },
    ]
  },
  {
    question: "Which of the following is not an exploit ",
    answersList: [
      { answer: "Buffer Overrun ", isCorrect: false },
      { answer: "Memory Overrun  ", isCorrect: true },
      { answer: "Stack Overrun ", isCorrect: false },
      { answer: "Heap Overrun ", isCorrect: false },
    ]
  },
  {
    question: "What does “Stack Smashing” involve? ",
    answersList: [
      { answer: "Overwriting the buffer, and the return address ", isCorrect: true },
      { answer: "Overwriting secondary storage on a device ", isCorrect: false },
      { answer: "Pushing a new frame onto the stack ", isCorrect: false },
    ]
  },
  {
    question: "What best suits the following definition: “where concurrent threads or processes lead to security vulnerabilities due to timing”? ",
    answersList: [
      { answer: "Return-Oriented Programming", isCorrect: false },
      { answer: "Heap Overruns  ", isCorrect: false },
      { answer: "Race Conditions ", isCorrect: true },
      { answer: "Heartbleed Exploit ", isCorrect: false },
    ]
  },
  {
    question: "Which of the following methods doesn’t help prevent stack smashing? ",
    answersList: [
      { answer: "Data Execution Prevention ", isCorrect: false },
      { answer: "Marking the stack as non-executable ", isCorrect: false },
      { answer: "Restricting access to obvious system calls ", isCorrect: false },
      { answer: "Return-Oriented Programming ", isCorrect: true },
    ]
  },
  {
    question: "What is stored on the stack? ",
    answersList: [
      { answer: "Information on local variables and functions calls ", isCorrect: true },
      { answer: "Data related to windows security ", isCorrect: false },
      { answer: "Password and login details ", isCorrect: false },
      { answer: "All possible kernel windows calls ", isCorrect: false },
    ]
  },
  {
    question: "What is a buffer? ",
    answersList: [
      { answer: "Contiguous blocks of memory allocated to store registries ", isCorrect: false },
      { answer: "Contiguous blocks of memory allocated to store arrays ", isCorrect: true },
      { answer: "Contiguous blocks of memory allocated to store subroutines ", isCorrect: false },
      { answer: "Contiguous blocks of memory allocated to store functions ", isCorrect: false },
    ]
  },
  {
    question: "What program contained the “Heartbleed” exploit? ",
    answersList: [
      { answer: "OpenSSL ", isCorrect: true },
      { answer: "SQL ", isCorrect: false },
      { answer: "Address Space Layout Randomisation (ASLR) ", isCorrect: false },
      { answer: "LibC ", isCorrect: false },
    ]
  },
  {
    question: "What is a “Gadget”? ",
    answersList: [
      { answer: "A function from a library ", isCorrect: false },
      { answer: "Short sections of existing code ", isCorrect: true },
      { answer: "A type of windows key  ", isCorrect: false },
    ]
  },
];
